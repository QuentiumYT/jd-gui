buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.7.0'
    }
}

plugins {
    id 'java'
    id 'distribution'
    id('edu.sc.seis.launch4j') version '4.0.0'
    id('com.netflix.nebula.ospackage') version '12.1.1'
}

repositories {
    mavenCentral()
    maven {
        url = 'https://plugins.gradle.org/m2/'
    }
    mavenLocal()
}

// Common configuration //
version = '1.7.2'
ext.set('jdCoreVersion', '1.2.2')

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    tasks.withType(JavaCompile) {
        sourceCompatibility = targetCompatibility = '1.8'
        options.compilerArgs << '-Xlint:deprecation'
        options.compilerArgs << '-Xlint:unchecked'
        options.compilerArgs << '-Xlint:-options'
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
        maven {
            url = uri("https://maven.pkg.github.com/QuentiumYT/jd-core")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GH_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GH_TOKEN")
            }
        }
        mavenLocal()
    }

    configurations {
        provided
        compile.extendsFrom provided
    }
}

// All in one JAR file //
subprojects.each { subproject ->
    evaluationDependsOn(subproject.path)
}

jar {
    dependsOn subprojects.tasks['jar']

    // Add SPI directory
    def tmpSpiDir = file('build/tmp/spi')
    from tmpSpiDir
    // Add dependencies
    def deps = []
    subprojects.each { subproject ->
        from subproject.sourceSets.main.output.classesDirs
        from subproject.sourceSets.main.output.resourcesDir
        deps += subproject.configurations.runtimeClasspath - subproject.configurations.provided
    }
    subprojects.each { subproject ->
        deps -= subproject.jar.archiveFile.get().asFile
    }
    deps = deps.unique().collect { it.isDirectory() ? it : zipTree(it) }
    from deps

    manifest {
        attributes 'Main-Class': 'org.jd.gui.App',
                   'SplashScreen-Image': 'org/jd/gui/images/jd_icon_128.png',
                   'JD-GUI-Version': project.version,
                   'JD-Core-Version': project.jdCoreVersion
    }
    exclude 'META-INF/licenses/**', 'META-INF/maven/**', 'META-INF/INDEX.LIST'
    exclude '**/ErrorStrip_*.properties', '**/RSyntaxTextArea_*.properties', '**/RTextArea_*.properties'
    exclude '**/FocusableTip_*.properties', '**/RSyntaxTextArea_License.txt'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    doFirst {
        // Create SPI directory
        tmpSpiDir.deleteDir()
        def tmpSpiServicesDir = file(tmpSpiDir.path + '/META-INF/services')
        tmpSpiServicesDir.mkdirs()
        // Copy and merge SPI config files
        subprojects.each { subproject ->
            def servicesDir = file(subproject.sourceSets.main.output.resourcesDir.path + '/META-INF/services')
            if (servicesDir.exists()) {
                servicesDir.eachFile { serviceFile ->
                    def target = file(tmpSpiServicesDir.path + '/' + serviceFile.name)
                    target << serviceFile.text
                }
            }
        }
    }
}

// Minify JAR file //
task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn 'jar'

    configuration 'src/proguard/resources/proguard.config.txt'

    injars jar.archiveFile.get().asFile
    outjars 'build/libs/' + project.name + '-' + project.version + '-min.jar'

    libraryjars System.getProperty('java.home') + '/lib/rt.jar'
    libraryjars System.getProperty('java.home') + '/jmods/'
}

// Java executable wrapper for Windows //
launch4j {
    createExe.dependsOn 'proguard'

    version = textVersion = project.version
    fileDescription = productName = 'JD-GUI'
    errTitle = 'JD-GUI Windows Wrapper'
    copyright = 'JD-GUI (C) 2008-2019 Emmanuel Dupuy'
    icon = projectDir.path + '/src/launch4j/resources/images/jd-gui.ico'
    jarTask = proguard
    bundledJrePath = '%JAVA_HOME%'
}

// Packages for Linux //
ospackage {
    buildDeb.dependsOn 'proguard'
    buildRpm.dependsOn 'proguard'

    os = LINUX
    distribution = 'stable'
    customField 'Urgency', 'medium'
    packageName = project.name
    packageDescription = 'JD-GUI, a standalone graphical utility that displays Java sources from class files'
    summary = 'A Java Decompiler'
    packageGroup = 'java'
    maintainer = 'Quentin Lienhardt <pro@quentium.fr>'
    version = project.version
    release = '1'
    customField 'Standards-Version', '4.7.2'
    url = 'https://github.com/QuentiumYT/jd-gui'
    customField 'Vcs-Browser', 'https://github.com/QuentiumYT/jd-gui'
    customField 'Vcs-Git', 'https://github.com/QuentiumYT/jd-gui.git'
    license = file('LICENSE')
    requires 'default-jre | default-jre-headless | openjdk-8-jre-headless | openjdk-11-jre-headless | openjdk-17-jre-headless | openjdk-21-jre-headless'

    into '/opt/' + project.name
    from(proguard.outJarFiles[0]) {
        fileMode = 0755
    }
    from('src/linux/resources') {
        include 'jd-gui.png', 'jd-gui.desktop'
        fileMode = 0644
    }
    from('src/linux/resources/jd-gui.desktop') {
        into '/usr/share/applications'
        fileMode = 0644
    }
    from('src/linux/resources/jd-gui.png') {
        into '/usr/share/icons/hicolor/128x128/apps'
        fileMode = 0644
    }
    from 'LICENSE', 'NOTICE', 'README.md'

    postInstall """
        cd /opt/${project.name} || exit 1
        ln -sf ./${file(proguard.outJarFiles[0]).name} ./jd-gui.jar
        xdg-icon-resource install --size 128 --novendor ./jd-gui.png jd-gui || true
        xdg-desktop-menu install ./jd-gui.desktop || true
        echo "#!/bin/sh
        java -jar /opt/${project.name}/jd-gui.jar" > /usr/bin/jd-gui
        chmod +x /usr/bin/jd-gui
        if [ -d /usr/share/applications ]; then
            xdg-desktop-menu forceupdate || true
        fi
        """
    postUninstall """
        cd /opt/${project.name} || exit 1
        unlink ./jd-gui.jar
        rm -rf ./ext
        xdg-desktop-menu uninstall ./jd-gui.desktop || true
        rm -f /usr/bin/jd-gui
        if [ -d /usr/share/applications ]; then
            xdg-desktop-menu forceupdate || true
        fi
        """
}

// Distributions for OSX and Windows //
distributions {
    osx.contents {
        into('JD-GUI.app/Contents') {
            from('src/osx/resources') {
                include 'Info.plist'
                expand VERSION: project.version,
                       JAR: file(proguard.outJarFiles[0]).name
            }
        }
        into('JD-GUI.app/Contents/MacOS') {
            from('src/osx/resources') {
                include 'universalJavaApplicationStub'
            }
        }
        into('JD-GUI.app/Contents/Resources/Java') {
            from proguard.outJarFiles[0]
        }
        from 'LICENSE', 'NOTICE', 'README.md'
    }
    windows.contents {
        from 'build/launch4j/jd-gui.exe'
        from 'LICENSE', 'NOTICE', 'README.md'
    }

    installWindowsDist.dependsOn createExe
    windowsDistTar.dependsOn createExe
    windowsDistZip.dependsOn createExe

    installOsxDist.dependsOn 'proguard'
    osxDistTar.dependsOn 'proguard'
    osxDistZip.dependsOn 'proguard'
}

task prepareSourcePackage(type: Copy) {
    dependsOn 'proguard'
    from('build/libs') {
        include '*-min.jar'
    }
    from('src/linux/resources') {
        include 'jd-gui.png', 'jd-gui.desktop'
    }
    from('.') {
        include 'LICENSE', 'NOTICE', 'README.md'
    }
    into "build/distributions/${project.name}-${project.version}"
}

task copyDebianDir(type: Copy) {
    from('build/debian') {
        exclude 'control'
    }
    from('src/linux/resources/debian')
    into "build/distributions/${project.name}-${project.version}/debian"
}

task createTarPackage(type: Tar) {
    dependsOn 'proguard', 'prepareSourcePackage', 'copyDebianDir'
    group = 'distribution'
    description = 'Creates a tarball of the JD-GUI distribution.'

    archiveFileName.set("${project.name}_${project.version}.orig.tar.gz")
    destinationDirectory.set(file('build/distributions'))
    compression = Compression.GZIP
    
    from("build/distributions/${project.name}-${project.version}") {
        include '**'
        exclude 'debian/**'
        exclude 'build/**'
        // Exclude other build artifacts if needed
        into "${project.name}-${project.version}"
    }
}

task sourceTarball(type: Tar) {
    group = 'distribution'
    description = 'Creates a tar.gz of all sources for Launchpad PPA.'

    archiveFileName.set("${project.name}-${project.version}.tar.gz")
    destinationDirectory.set(file('build/distributions'))
    compression = Compression.GZIP

    // Include all sources and important files
    from('.') {
        include 'api/**'
        include 'app/**'
        include 'services/**'
        include 'src/**'
        include 'build.gradle', 'settings.gradle', 'gradlew', 'gradlew.bat', 'gradle/**'
        include 'LICENSE', 'README.md', 'NOTICE'
        exclude 'build/**', '.gradle/**', '**/.idea/**', '**/.vscode/**', '**/.git/**', '**/.github/**'
        into "${project.name}-${project.version}"
    }
    // Add debian directory at root of tarball
    from('src/linux/resources/debian') {
        into "${project.name}-${project.version}/debian"
    }
}

tasks.register('debuild', Exec) {
    dependsOn 'prepareSourcePackage', 'copyDebianDir', 'createTarPackage'
    workingDir "build/distributions/${project.name}-${project.version}"
    commandLine 'bash', '-c', 'yes | debuild -S'
}

build.finalizedBy sourceTarball
build.finalizedBy buildDeb
build.finalizedBy buildRpm
