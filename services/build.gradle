plugins {
    id 'java'
}

// ANTLR //
ext.antlr4 = [
    antlrSource: 'src/main/antlr',
    destinationDir: 'src-generated/antlr/java',
    grammarPackage: 'org.jd.gui.util.parser.antlr'
]

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

dependencies {
    implementation 'com.fifesoft:rsyntaxtextarea:3.6.0'
    implementation 'org.ow2.asm:asm:9.8'
    implementation 'org.antlr:antlr4-runtime:4.13.2'
    implementation 'org.jd:jd-core:' + parent.jdCoreVersion
    implementation project(':api')
    testImplementation 'junit:junit:4.13.2'
    antlr4 'org.antlr:antlr4:4.13.2'
}

version = parent.version

task antlr4OutputDir() {
    mkdir antlr4.destinationDir
}

task generateGrammarSource(dependsOn: antlr4OutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr4.antlrSource)
    outputs.dir file(antlr4.destinationDir)

    def grammars = fileTree(antlr4.antlrSource).include('**/*.g4')
    def pkg = antlr4.grammarPackage.replaceAll("\\.", "/")

    mainClass = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = ['-o', "${antlr4.destinationDir}/${pkg}", '-package', antlr4.grammarPackage, grammars.files].flatten()
}

compileJava {
    dependsOn generateGrammarSource
    source antlr4.destinationDir
}

clean {
    delete 'src-generated'
}

idea.module {
    sourceDirs += file(antlr4.destinationDir)
}
ideaModule.dependsOn generateGrammarSource

eclipse.classpath.file.withXml { xml ->
    def node = xml.asNode()
    node.appendNode('classpathentry', [ kind: 'src', path: antlr4.destinationDir])
}
eclipseClasspath.dependsOn generateGrammarSource
